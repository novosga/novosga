name: CI

on: [push]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DATABASE_URL: "mysql://root:dbpass@127.0.0.1:3306/novosga?serverVersion=5.7.40&charset=utf8"
  # DATABASE_URL: "postgresql://postgres:dbpass@127.0.0.1:5432/novosga?serverVersion=15&charset=utf8"
  APP_ENV: "test"

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_DATABASE: novosga_test
          MYSQL_ROOT_PASSWORD: dbpass
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 3306:3306
      # postgres:
      #   image: postgres:15
      #   env:
      #     POSTGRES_USER: postgres
      #     POSTGRES_PASSWORD: dbpass
      #     POSTGRES_DB: novosga_test
      #   options: >-
      #     --health-cmd pg_isready
      #     --health-interval 10s
      #     --health-timeout 5s
      #     --health-retries 5
      #   ports:
      #     - 5432:5432

    steps:
      - uses: actions/checkout@v3
      - uses: shivammathur/setup-php@2.28.0
        with:
          php-version: 8.2

      - name: Install dependencies
        run: composer install

      - name: Generate certificate
        run: |
          mkdir config/jwt
          openssl genrsa -out config/jwt/private.pem 2048
          openssl rsa -in config/jwt/private.pem -pubout -out config/jwt/public.pem

      - name: PHP Code Standards
        run: vendor/bin/phpcs

      - name: PHP Code Analysis 
        run: vendor/bin/phpstan

      - name: Yaml Lint
        run: |
          bin/console lint:yaml config
          bin/console lint:yaml translations

      - name: Doctrine Migrations
        run: bin/console doctrine:migrations:migrate --no-interaction

      - name: PHP Unit Tests
        run: vendor/bin/phpunit

      - name: Log in to the Container registry
        uses: docker/login-action@v2.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4.3.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4.0.0
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
